# Stage that builds the application, a prerequisite for the running stage
FROM maven:3-eclipse-temurin-17-focal as build
# The below line is optional, but it speeds up repeated builds by downloading nodejs and npm
# This docker layer will be cached and reused between builds
# Otherwise, the later mvn clean package command will download nodejs and npm after every change
RUN curl -sL https://deb.nodesource.com/setup_18.x | bash - && apt-get install -y nodejs

# Stop running as root at this point
RUN addgroup --system spring
RUN adduser --system --ingroup spring spring
WORKDIR /usr/src/app/
RUN chown spring:spring /usr/src/app/
USER spring

# Copy pom.xml and prefetch dependencies so a repeated build can continue from the next step with existing dependencies
COPY --chown=spring pom.xml ./
RUN mvn dependency:go-offline -Pproduction

# Copy all needed project files to a folder
COPY --chown=spring:spring src src
COPY --chown=spring:spring frontend frontend
COPY --chown=spring:spring package.json ./

# Using * after the files that are autogenerated so that so build won't fail if they are not yet created
COPY --chown=spring:spring package-lock.json* pnpm-lock.yaml* webpack.config.js* vite.config.js* ./

# Build the production package, assuming that we validated the version before so no need for running tests again
RUN mvn clean package -DskipTests -Pproduction

# Running stage: the part that is used for running the application
FROM eclipse-temurin:17-jdk-alpine
COPY --from=build /usr/src/app/target/*.jar /productionpilot.jar
RUN addgroup --system spring && adduser --system spring --ingroup spring
USER spring:spring

EXPOSE 8080
VOLUME /config
CMD java -jar /productionpilot.jar
